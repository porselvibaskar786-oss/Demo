name: Patching Control (SSM) + Teams + Dynatrace (Email/Reply Approval)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      DYNATRACE_ENV_ID: ${{ secrets.DYNATRACE_ENV_ID }}
      DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests pandas pytz

      - name: Send Teams approval message
        run: |
          python <<'PY'
          import os, requests
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          if TEAMS_URL:
              msg = {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "0076D7",
                  "summary": "Patching Scheduled - Reply YES to approve",
                  "sections": [{"activityTitle": "**Patching Scheduled**",
                                "text": "Reply with YES in email or Teams to approve patching."}]
              }
              try:
                  requests.post(TEAMS_URL, json=msg, timeout=10)
              except Exception as e:
                  print(f"[teams] send failed: {e}")
PY

      - name: Wait for approval via email
        run: |
          python <<'PY'
          import os, time, imaplib, email

          EMAIL_HOST = os.getenv("EMAIL_HOST")
          EMAIL_USER = os.getenv("EMAIL_USER")
          EMAIL_PASS = os.getenv("EMAIL_PASS")
          approved = False
          timeout = 300  # wait up to 5 minutes

          mail = imaplib.IMAP4_SSL(EMAIL_HOST)
          mail.login(EMAIL_USER, EMAIL_PASS)

          for _ in range(timeout // 10):
              mail.select("inbox")
              typ, data = mail.search(None, '(UNSEEN FROM "{}")'.format(EMAIL_USER))
              for num in data[0].split():
                  typ, msg_data = mail.fetch(num, '(RFC822)')
                  msg = email.message_from_bytes(msg_data[0][1])
                  body = msg.get_payload(decode=True).decode(errors="ignore")
                  if "YES" in body.upper():
                      approved = True
                      break
              if approved:
                  break
              time.sleep(10)

          if not approved:
              print("No approval received. Exiting.")
              exit(0)
PY

      - name: Run SSM patching after approval
        run: |
          python windowed_health_check_ssm.py
