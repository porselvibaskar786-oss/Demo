...
- name: Patching + Teams + Dynatrace Automation
  run: |
    python <<'PY'
    import os, pandas as pd, requests, time, pytz, boto3
    from datetime import datetime, timedelta

    FILE = os.getenv("SCHEDULE_FILE")
    TARGET_ENV = os.getenv("TARGET_ENV")
    TZ = pytz.timezone(os.getenv("TZ"))
    TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
    EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
    AWS_REGION = os.getenv("AWS_REGION")
    DYNATRACE_ENV_ID = os.getenv("DYNATRACE_ENV_ID")
    DYNATRACE_API_TOKEN = os.getenv("DYNATRACE_API_TOKEN")

    ssm = boto3.client("ssm", region_name=AWS_REGION)

    def post_teams(msg, level="Info"):
        if not TEAMS_URL: return
        payload = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0076D7" if level.lower()=="info" else "FF0000",
            "summary": f"{level}: {msg}",
            "sections": [{"activityTitle": f"**{level}**", "text": msg}],
        }
        try: requests.post(TEAMS_URL, json=payload, timeout=10)
        except: pass

    # --- Load file and normalize headers ---
    ext = os.path.splitext(FILE)[1].lower()
    if ext == ".csv":
        df = pd.read_csv(FILE)
    else:
        df = pd.read_excel(FILE)
    # normalize: remove extra spaces & lowercase
    df.columns = [c.strip().lower().replace(" ", "_") for c in df.columns]

    post_teams(f"📋 Patching Schedule:\n{df.to_string(index=False)}")

    now = datetime.now(TZ)

    for idx,row in df.iterrows():
        try:
            app = row['app_name'] if 'app_name' in row else row['app']
            env = row['environment'] if 'environment' in row else row['env']
            if env != TARGET_ENV: continue

            # normalized columns
            start = TZ.localize(pd.to_datetime(row['start_date']))
            stop  = TZ.localize(pd.to_datetime(row['stop_date']))
            cmd = row['command']
            iid = row.get('instanceid') or EC2_INSTANCE_ID
            url = row.get('health_url') or row.get('healthurl')

            # Reminder + Auto-approval
            if timedelta(minutes=0) <= (start-now) <= timedelta(minutes=5):
                post_teams(f"⏰ Reminder: Patching starts in 5 min for {app}")
            post_teams(f"✅ Auto-approved: {app} ready for patching")

            # Patch inside window
            if start <= now <= stop:
                post_teams(f"🛑 Patching started for {app}")
                # SSM command
                try:
                    resp = ssm.send_command(
                        InstanceIds=[iid],
                        DocumentName="AWS-RunShellScript",
                        Parameters={"commands":[cmd]},
                        TimeoutSeconds=60
                    )
                    post_teams(f"✅ Patching done for {app}")
                except Exception as e:
                    post_teams(f"❌ Patching failed for {app}: {e}", "Alert")
                    continue

                # Health check
                if url:
                    try:
                        status = requests.get(url, timeout=5).status_code
                        if status==200:
                            post_teams(f"💚 {app} healthy after patching")
                        else:
                            post_teams(f"⚠ {app} unhealthy after patching (status {status})")
                    except: post_teams(f"⚠ {app} health check failed")
            else:
                post_teams(f"⏸ Outside patch window for {app}")

        except Exception as e:
            post_teams(f"❌ Unexpected error processing row: {e}", "Alert")
    PY
