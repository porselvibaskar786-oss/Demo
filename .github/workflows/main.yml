name: Patching Control + Teams + Auto-Restart + Dynatrace

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      DYNATRACE_ENV_ID: ${{ secrets.DYNATRACE_ENV_ID }}
      DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - run: pip install pandas requests pytz boto3

      - name: Send Schedule + Reminder + Auto-Approval + Patching
        run: |
          python <<'PY'
          import os, pandas as pd, requests, pytz, time, boto3
          from datetime import datetime, timedelta

          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          CSV_PATH = os.getenv("CSV_PATH")
          TARGET_ENV = os.getenv("TARGET_ENV")
          TZ = pytz.timezone(os.getenv("TZ"))
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          AWS_REGION = os.getenv("AWS_REGION")

          ssm = boto3.client("ssm", region_name=AWS_REGION)

          def post(msg): requests.post(TEAMS_URL, json={"text": msg})
          def restart(cmd):
              if cmd and cmd!="-":
                  ssm.send_command(
                      InstanceIds=[EC2_INSTANCE_ID],
                      DocumentName="AWS-RunShellScript",
                      Parameters={"commands":[cmd]},
                      TimeoutSeconds=60
                  )
          def health_check(url):
              try: return requests.get(url, timeout=5).status_code==200
              except: return False

          df = pd.read_csv(CSV_PATH, sep="\t")
          now = datetime.now(TZ)

          for idx,row in df.iterrows():
              if row['Environment'] != TARGET_ENV: continue
              app, cmd, url = row['App Name'], row['Command'], row['health URL']
              start = TZ.localize(datetime.strptime(row['start Date'], "%d-%m-%Y %H:%M:%S"))
              stop  = TZ.localize(datetime.strptime(row['stop Date'], "%d-%m-%Y %H:%M:%S"))
              approval = str(row.get("approval_status","")).lower()

              # Reminder 5 min before patching
              if start - timedelta(minutes=5) <= now < start:
                  post(f"⏰ Reminder: Patching starts in 5 min for {app} (Owner: {row['Owner']})")

              # Auto-Approval
              if approval != "approved":
                  df.at[idx,"approval_status"] = "approved"
                  post(f"✅ Auto-approved: {app} will start patching")

              # Patching window
              if start <= now <= stop and df.at[idx,"approval_status"]=="approved":
                  post(f"🛑 Patching started for {app}")
                  time.sleep(2)
                  if not health_check(url):
                      post(f"❌ {app} unhealthy. Restarting...")
                      restart(cmd)
                      time.sleep(5)
                  if health_check(url):
                      post(f"💚 {app} is healthy")
                  else:
                      post(f"⚠ {app} still unhealthy")

              # Outside patch window
              else:
                  if not health_check(url):
                      post(f"⚠ {app} unhealthy outside window. Restarting...")
                      restart(cmd)
                      time.sleep(5)
                      if health_check(url):
                          post(f"💚 {app} healthy after restart")
                      else:
                          post(f"⚠ {app} still unhealthy")

          df.to_csv(CSV_PATH, sep="\t", index=False)
          PY

      - name: Dynatrace Alerts
        run: |
          python <<'PY'
          import os, requests
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          DYNATRACE_ENV_ID = os.getenv("DYNATRACE_ENV_ID")
          DYNATRACE_API_TOKEN = os.getenv("DYNATRACE_API_TOKEN")

          def post(msg): requests.post(TEAMS_URL,json={"text":msg})

          try:
              url=f"https://{DYNATRACE_ENV_ID}.live.dynatrace.com/api/v2/problems"
              headers={"Authorization":f"Api-Token {DYNATRACE_API_TOKEN}", "Accept":"application/json"}
              params={"status":"OPEN","from":"now-30m","fields":"title,severity,affectedEntities"}
              r = requests.get(url, headers=headers, params=params, timeout=10)
              r.raise_for_status()
              for p in r.json().get("problems", []):
                  entities = ", ".join([e['entityId'] for e in p.get("affectedEntities", [])])
                  post(f"⚠ Dynatrace Alert: {p['title']}\nSeverity: {p['severity']}\nAffected Entities: {entities}")
          except Exception as e:
              post(f"Dynatrace fetch failed: {e}")
          PY
