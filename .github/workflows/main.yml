name: Patching Control with SSM + Teams

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"   # every 5 mins

env:
  CSV_PATH: "schedule.csv"
  TARGET_ENV: "Production"
  TZ: "Asia/Kolkata"
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  AWS_REGION: "eu-central-1"   # change for your region
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  patching-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Verify instance is Online in SSM
        run: |
          set -e
          status=$(aws ssm describe-instance-information \
            --region "$AWS_REGION" \
            --query "InstanceInformationList[?InstanceId=='$EC2_INSTANCE_ID'].PingStatus|[0]" --output text)
          echo "SSM PingStatus: $status"
          if [ "$status" != "Online" ]; then
            echo "‚ùå Instance not Online in SSM. Ensure SSM agent running + IAM role attached."
            exit 1
          fi

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests pandas pytz openpyxl

      - name: Run patching logic inline
        run: |
          python - <<'PY'
          import boto3, pandas as pd, requests, pytz, datetime, os, time

          # ========= Config =========
          CSV_PATH = os.getenv("CSV_PATH", "schedule.csv")
          TARGET_ENV = os.getenv("TARGET_ENV", "Production")
          TEAMS_WEBHOOK_URL = os.getenv("TEAMS_WEBHOOK_URL")
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          AWS_REGION = os.getenv("AWS_REGION", "eu-central-1")
          TZ = pytz.timezone(os.getenv("TZ", "Asia/Kolkata"))
          MAX_RETRIES, RETRY_DELAY = 3, 15
          # ==========================

          ssm = boto3.client("ssm", region_name=AWS_REGION)

          def send_teams_message(message: str):
              payload = {"text": message}
              try:
                  requests.post(TEAMS_WEBHOOK_URL, json=payload)
              except Exception as e:
                  print(f"‚ö†Ô∏è Teams send failed: {e}")

          def run_ssm_command(commands):
              resp = ssm.send_command(
                  InstanceIds=[EC2_INSTANCE_ID],
                  DocumentName="AWS-RunShellScript",
                  Parameters={"commands": commands},
              )
              cid = resp["Command"]["CommandId"]
              for _ in range(10):
                  time.sleep(5)
                  out = ssm.get_command_invocation(CommandId=cid, InstanceId=EC2_INSTANCE_ID)
                  if out["Status"] in ["Success","Failed","Cancelled","TimedOut"]:
                      return out
              return {"Status": "Unknown", "StandardOutputContent": "", "StandardErrorContent": "Timeout"}

          def check_app_health(url="http://localhost:5000/health"):
              for attempt in range(1, MAX_RETRIES+1):
                  try:
                      r = requests.get(url, timeout=5)
                      if r.status_code == 200:
                          return True
                  except Exception: pass
                  print(f"‚ö†Ô∏è Health check attempt {attempt} failed")
                  time.sleep(RETRY_DELAY)
              return False

          def main():
              now = datetime.datetime.now(TZ)
              df = pd.read_csv(CSV_PATH)
              for _, row in df.iterrows():
                  start = TZ.localize(pd.to_datetime(row["start"]))
                  stop  = TZ.localize(pd.to_datetime(row["stop"]))
                  env   = row.get("env","Production")
                  if env != TARGET_ENV: continue

                  if start <= now <= stop:
                      send_teams_message("‚ö†Ô∏è Patching window started. Stopping Docker...")
                      res = run_ssm_command(["docker stop $(docker ps -q) || true"])
                      send_teams_message(f"üîª Docker stop result: {res['Status']}")
                      return

                  if now > stop:
                      send_teams_message("‚úÖ Patching ended. Restarting Docker...")
                      res = run_ssm_command(["docker start $(docker ps -aq) || true"])
                      if check_app_health():
                          send_teams_message("üü¢ App is healthy after restart ‚úÖ")
                      else:
                          send_teams_message("‚ùå App health check failed ‚ùå")
                      return

          if __name__ == "__main__":
              main()
          PY

