name: Patching Control (SSM) + Teams Approval

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests pandas pytz imaplib email

      - name: Send Teams approval message and run patching if approved
        run: |
          python <<'PY'
          import os, time, requests, pandas as pd, boto3, pytz, imaplib, email
          from datetime import datetime, timedelta

          CSV_PATH = os.getenv("CSV_PATH")
          TZ = pytz.timezone(os.getenv("TZ"))
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          AWS_REGION = os.getenv("AWS_REGION")
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          EMAIL_HOST = os.getenv("EMAIL_HOST")
          EMAIL_USER = os.getenv("EMAIL_USER")
          EMAIL_PASS = os.getenv("EMAIL_PASS")

          ssm = boto3.client("ssm", region_name=AWS_REGION)

          def post_teams(msg, level="Info"):
              payload = {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "0076D7" if level.lower()=="info" else "FF0000",
                  "summary": f"{level}: {msg}",
                  "sections": [{"activityTitle": f"**{level}**", "text": msg}],
              }
              try: requests.post(TEAMS_URL, json=payload, timeout=10)
              except Exception as e: print(f"[teams] failed: {e}")

          def check_email_approval():
              try:
                  mail = imaplib.IMAP4_SSL(EMAIL_HOST)
                  mail.login(EMAIL_USER, EMAIL_PASS)
                  mail.select('inbox')
                  status, data = mail.search(None, 'UNSEEN')
                  for num in data[0].split():
                      status, msg_data = mail.fetch(num, '(RFC822)')
                      msg = email.message_from_bytes(msg_data[0][1])
                      body = msg.get_payload(decode=True).decode().lower()
                      if "yes" in body:
                          return True
              except Exception as e:
                  print(f"[email] approval check failed: {e}")
              return False

          def ssm_run(iid, cmd):
              try:
                  resp = ssm.send_command(
                      InstanceIds=[iid],
                      DocumentName="AWS-RunShellScript",
                      Parameters={"commands":[cmd]},
                      CloudWatchOutputConfig={"CloudWatchOutputEnabled": False},
                  )
                  cmd_id = resp["Command"]["CommandId"]
                  for _ in range(180):
                      out = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=iid)
                      if out["Status"] in ("Success","Failed","Cancelled","TimedOut"):
                          return int(out.get("ResponseCode",1)), out.get("StandardOutputContent",""), out.get("StandardErrorContent","")
                      time.sleep(1)
              except Exception as e:
                  return 1,"",f"SSM error: {e}"

          def ensure_online(iid):
              try:
                  resp = ssm.describe_instance_information(Filters=[{"Key":"InstanceIds","Values":[iid]}])
                  if resp["InstanceInformationList"]:
                      return resp["InstanceInformationList"][0]["PingStatus"]=="Online"
              except: pass
              return False

          # --- Load CSV ---
          df = pd.read_csv(CSV_PATH)
          df.columns = [c.strip().lower().replace(" ","_") for c in df.columns]

          now = datetime.now(TZ)

          # Step 1: Send dummy Teams message
          for idx,row in df.iterrows():
              app = row['app_name']
              post_teams(f"📌 Patching scheduled for {app}. Reply YES to approve.", "Info")

          # Step 2: Wait and check for approval
          approved = False
          for _ in range(6):  # check 6 times with 10s interval (~1 min)
              if check_email_approval():
                  approved = True
                  break
              time.sleep(10)

          if not approved:
              post_teams("⏳ Patching not approved yet.", "Info")
              exit(0)

          # Step 3: Run patching
          for idx,row in df.iterrows():
              try:
                  app = row['app_name']
                  iid = row.get('instanceid') or EC2_INSTANCE_ID
                  cmd = row['command']
                  if not ensure_online(iid):
                      post_teams(f"❌ {app}: {iid} not online", "Alert")
                      continue
                  post_teams(f"▶️ Starting {app} on {iid}: `{cmd}`", "Info")
                  rc,out,err = ssm_run(iid, cmd)
                  if rc != 0:
                      post_teams(f"❌ {app} failed: {err or out}", "Alert")
                  else:
                      post_teams(f"✅ {app} patched successfully", "Info")
              except Exception as e:
                  post_teams(f"❌ Unexpected error for {app}: {e}", "Alert")
          PY
