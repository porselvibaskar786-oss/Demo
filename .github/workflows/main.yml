name: Patching Control + Teams + Auto-Restart + Dynatrace

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      DYNATRACE_ENV_ID: ${{ secrets.DYNATRACE_ENV_ID }}
      DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install pandas requests pytz tabulate boto3

      - name: Step 1: Send Schedule CSV
        run: |
          python <<'PY'
          import pandas as pd, os, requests
          from tabulate import tabulate
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          CSV_PATH = os.getenv("CSV_PATH")

          df = pd.read_csv(CSV_PATH)
          table = tabulate(df, headers="keys", tablefmt="github")
          payload = {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "Patching Schedule",
              "sections": [{"activityTitle":"📋 Current Schedule","text":"Schedule before patching."},{"text":table}]
          }
          requests.post(TEAMS_URL,json=payload)
          PY

      - name: Step 2: Reminder Before Patching
        run: |
          python <<'PY'
          import pandas as pd, os, requests, pytz
          from datetime import datetime, timedelta
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          CSV_PATH = os.getenv("CSV_PATH")
          TZ = pytz.timezone(os.getenv("TZ"))
          TARGET_ENV = os.getenv("TARGET_ENV")

          df = pd.read_csv(CSV_PATH)
          now = datetime.now(TZ)

          for idx,row in df.iterrows():
              if row['Environment'] != TARGET_ENV: continue
              start = TZ.localize(datetime.strptime(row['start Date'],"%d-%m-%Y %H:%M:%S"))
              if start - timedelta(minutes=5) <= now < start:
                  msg = f"⏰ Reminder: Patching starts in 5 minutes for **{row['App Name']}** (Owner: {row['Owner']})"
                  payload = {"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"0076D7","summary":"Patching Reminder","sections":[{"activityTitle":msg}]}
                  requests.post(TEAMS_URL,json=payload)
          PY

      - name: Step 3: Patching Started
        run: |
          python <<'PY'
          import pandas as pd, os, requests, time, pytz, boto3
          from datetime import datetime
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          CSV_PATH = os.getenv("CSV_PATH")
          TZ = pytz.timezone(os.getenv("TZ"))
          TARGET_ENV = os.getenv("TARGET_ENV")
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          AWS_REGION = os.getenv("AWS_REGION")
          ssm = boto3.client("ssm", region_name=AWS_REGION)

          def restart(cmd):
              return ssm.send_command(
                  InstanceIds=[EC2_INSTANCE_ID],
                  DocumentName="AWS-RunShellScript",
                  Parameters={"commands":[cmd]},
                  TimeoutSeconds=60
              )

          def health_check(url):
              import requests
              try: return requests.get(url,timeout=5).status_code==200
              except: return False

          df = pd.read_csv(CSV_PATH)
          now = datetime.now(TZ)

          for idx,row in df.iterrows():
              if row['Environment'] != TARGET_ENV: continue
              start = TZ.localize(datetime.strptime(row['start Date'],"%d-%m-%Y %H:%M:%S"))
              stop  = TZ.localize(datetime.strptime(row['stop Date'],"%d-%m-%Y %H:%M:%S"))
              if start <= now <= stop:
                  # Post patching started
                  msg = f"🛑 Patching started for {row['App Name']} (Owner: {row['Owner']})"
                  requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"0076D7","summary":"Patching Started","sections":[{"activityTitle":msg}]})

                  time.sleep(2)  # simulate patching

                  # Health check
                  url = row['health URL']
                  cmd = row['Command']
                  if health_check(url):
                      msg2 = f"💚 Health check passed: {row['App Name']} is healthy"
                      requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"00FF00","summary":"Health Check","sections":[{"activityTitle":msg2}]})
                  else:
                      msg2 = f"❌ Health failed: {row['App Name']}. Restarting via SSM..."
                      requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"FF0000","summary":"Health Check","sections":[{"activityTitle":msg2}]})
                      if cmd!="-": restart(cmd)
                      time.sleep(5)
                      if health_check(url):
                          msg3 = f"💚 Health restored: {row['App Name']} is healthy after restart"
                          requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"00FF00","summary":"Health Restored","sections":[{"activityTitle":msg3}]})
                      else:
                          msg3 = f"⚠ Still unhealthy: {row['App Name']} failed recovery"
                          requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"FF0000","summary":"Health Failed","sections":[{"activityTitle":msg3}]})
          PY

      - name: Step 4: Health Check Outside Window & Restart Simulation
        run: |
          python <<'PY'
          import pandas as pd, os, requests, pytz, time, random
          from datetime import datetime
          import boto3
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          CSV_PATH = os.getenv("CSV_PATH")
          TZ = pytz.timezone(os.getenv("TZ"))
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          AWS_REGION = os.getenv("AWS_REGION")
          ssm = boto3.client("ssm", region_name=AWS_REGION)

          def restart(cmd):
              return ssm.send_command(InstanceIds=[EC2_INSTANCE_ID],DocumentName="AWS-RunShellScript",Parameters={"commands":[cmd]},TimeoutSeconds=60)
          def health_check(url):
              try: return requests.get(url,timeout=5).status_code==200
              except: return False

          df = pd.read_csv(CSV_PATH)
          now = datetime.now(TZ)

          for idx,row in df.iterrows():
              start = TZ.localize(datetime.strptime(row['start Date'],"%d-%m-%Y %H:%M:%S"))
              stop  = TZ.localize(datetime.strptime(row['stop Date'],"%d-%m-%Y %H:%M:%S"))
              url = row['health URL']
              cmd = row['Command']
              # Outside window
              if now < start or now > stop:
                  if health_check(url):
                      msg = f"💡 Health check: {row['App Name']} is healthy"
                      requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"0076D7","summary":"Health Check","sections":[{"activityTitle":msg}]})
                      # Randomly simulate stop/restart one app
                      if random.choice([True,False]):
                          msg2 = f"🔄 Simulate stop & restart: {row['App Name']}"
                          requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"FFA500","summary":"Simulate Restart","sections":[{"activityTitle":msg2}]})
                          if cmd!="-": restart(cmd)
                          time.sleep(5)
                          if health_check(url):
                              msg3 = f"💚 Health restored: {row['App Name']} is healthy after restart"
                              requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"00FF00","summary":"Health Restored","sections":[{"activityTitle":msg3}]})
                          else:
                              msg3 = f"⚠ Still unhealthy: {row['App Name']} failed recovery"
                              requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"FF0000","summary":"Health Failed","sections":[{"activityTitle":msg3}]})
                  else:
                      msg = f"⚠ Health check failed outside window: {row['App Name']} is unhealthy"
                      requests.post(TEAMS_URL,json={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":"FF0000","summary":"Health Failed","sections":[{"activityTitle":msg}]})
          PY

      - name: Step 5: Dynatrace Alerts
        run: |
          python <<'PY'
          import os, requests
          DYNATRACE_ENV_ID = os.getenv("DYNATRACE_ENV_ID")
          DYNATRACE_API_TOKEN = os.getenv("DYNATRACE_API_TOKEN")
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")

          def post_teams(title,message,color="0076D7"):
              payload={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":color,"summary":title,"sections":[{"activityTitle":title,"text":message}]}
              requests.post(TEAMS_URL,json=payload)

          try:
              url=f"https://{DYNATRACE_ENV_ID}.live.dynatrace.com/api/v2/problems"
              headers={"Authorization":f"Api-Token {DYNATRACE_API_TOKEN}","Accept":"application/json"}
              params={"status":"OPEN","from":"now-30m","fields":"title,severity,affectedEntities"}
              r = requests.get(url, headers=headers, params=params, timeout=10)
              r.raise_for_status()
              problems = r.json().get("problems",[])
              for p in problems:
                  entities=", ".join([e['entityId'] for e in p.get("affectedEntities",[])])
                  color={"ERROR":"FF0000","WARNING":"FFA500","INFO":"0076D7"}.get(p["severity"],"0076D7")
                  post_teams(f"⚠ Dynatrace Alert: {p['title']}", f"Severity: {p['severity']}\nAffected Entities: {entities}", color=color)
          except Exception as e:
              post_teams("Dynatrace fetch failed", str(e), color="FF0000")
          PY
