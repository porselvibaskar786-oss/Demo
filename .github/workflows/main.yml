name: Patching Control (SSM) + Teams + Dynatrace

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      DYNATRACE_ENV_ID: ${{ secrets.DYNATRACE_ENV_ID }}
      DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests pandas pytz

      - name: Run patching workflow
        run: |
          python <<'PY'
          import os, time, requests, pandas as pd, boto3, pytz
          from datetime import datetime, timedelta

          # Environment
          CSV_PATH = os.getenv("CSV_PATH")
          TARGET_ENV = os.getenv("TARGET_ENV")
          TZ = pytz.timezone(os.getenv("TZ"))
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")
          AWS_REGION = os.getenv("AWS_REGION")
          EC2_INSTANCE_ID = os.getenv("EC2_INSTANCE_ID")
          DYNATRACE_ENV_ID = os.getenv("DYNATRACE_ENV_ID")
          DYNATRACE_API_TOKEN = os.getenv("DYNATRACE_API_TOKEN")

          ssm = boto3.client("ssm", region_name=AWS_REGION)

          # --- Helper functions ---
          def post_teams_table(df, msg="Patching Coordination"):
              table_text = "| App | Start | End | Pre-Check | Patch Start | App Restart | Status |\n"
              table_text += "|-----|-------|-----|-----------|-------------|-------------|--------|\n"
              for _, row in df.iterrows():
                  table_text += f"| {row['app_name']} | {row['start_date']} | {row['stop_date']} | {row['pre_check']} | {row['patch_start']} | {row['app_restart']} | {row['status']} |\n"
              payload = {
                  "@type":"MessageCard",
                  "@context":"http://schema.org/extensions",
                  "themeColor":"0076D7",
                  "summary": msg,
                  "sections":[{"activityTitle":f"**{msg}**","text":table_text}],
              }
              try: requests.post(TEAMS_URL, json=payload, timeout=10)
              except Exception as e: print(f"[teams] failed: {e}")

          def ssm_run(instance_id, cmd, timeout_s=180):
              try:
                  resp = ssm.send_command(
                      InstanceIds=[instance_id],
                      DocumentName="AWS-RunShellScript",
                      Parameters={"commands":[cmd]},
                      CloudWatchOutputConfig={"CloudWatchOutputEnabled": False},
                  )
                  cmd_id = resp["Command"]["CommandId"]
                  for _ in range(timeout_s):
                      out = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=instance_id)
                      if out["Status"] in ("Success","Failed","Cancelled","TimedOut"):
                          return int(out.get("ResponseCode",1)), out.get("StandardOutputContent",""), out.get("StandardErrorContent","")
                      time.sleep(1)
                  return 1,"","Timed out waiting for SSM command"
              except Exception as e:
                  return 1,"",f"SSM error: {e}"

          def http_status_via_ssm(instance_id, url):
              if not url: return None
              shell = f'curl -sS -m 8 -w "\\nHTTP_STATUS:%{{http_code}}" "{url}" || true'
              code, out, err = ssm_run(instance_id, shell)
              if code != 0: return None
              try: return int(out.rsplit("HTTP_STATUS:",1)[1].strip())
              except: return None

          def ensure_online(instance_id):
              try:
                  resp = ssm.describe_instance_information(Filters=[{"Key":"InstanceIds","Values":[instance_id]}])
                  if resp["InstanceInformationList"]:
                      return resp["InstanceInformationList"][0]["PingStatus"]=="Online"
              except: pass
              return False

          def send_dynatrace_event(app, msg, success=True):
              if not DYNATRACE_ENV_ID or not DYNATRACE_API_TOKEN: return
              try:
                  url = f"https://{DYNATRACE_ENV_ID}.apps.dynatrace.com/api/v2/events"
                  headers = {"Authorization": f"Api-Token {DYNATRACE_API_TOKEN}"}
                  payload = {"eventType":"CUSTOM_ANNOTATION" if success else "CUSTOM_ALERT",
                             "attachRules":{"entityIds":[]},
                             "source":"GitHub Actions",
                             "description": f"{app} - {msg}. Problem link: https://lyt09047.apps.dynatrace.com/ui/apps/dynatrace.davis.problems/"}
                  requests.post(url, headers=headers, json=payload, timeout=5)
              except Exception as e: print(f"[dynatrace] event failed: {e}")

          # --- Load CSV ---
          df = pd.read_csv(CSV_PATH)
          df.columns = [c.strip().lower().replace(" ","_") for c in df.columns]
          now = datetime.now(TZ)

          # --- Stage 1: Pre-Patching Calendar ---
          for i, row in df.iterrows():
              if row.get('approval_status','pending').lower() == 'pending':
                  df.at[i,'approval_status'] = 'approved'
              df.at[i,'start_date'] = (now + timedelta(seconds=10)).strftime("%Y-%m-%d %H:%M:%S")
              df.at[i,'stop_date']  = (now + timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M:%S")
              df.at[i,'pre_check'] = "Completed"
              df.at[i,'patch_start'] = "Scheduled"
              df.at[i,'app_restart'] = "-"
              df.at[i,'status'] = "-"
          df.to_csv(CSV_PATH,index=False)
          post_teams_table(df, msg="Pre-Patching Calendar")

          # --- Stage 2-5: Execute Patching ---
          for idx, row in df.iterrows():
              app = row['app_name']
              env = row['environment']
              if env != TARGET_ENV: continue
              iid = row.get('instanceid') or EC2_INSTANCE_ID
              url = row.get('health_url')

              # Stage 2: Patch Start
              df.at[idx,'patch_start'] = "Started"
              post_teams_table(df, msg=f"Patching started for {app}")

              # Check online
              if not ensure_online(iid):
                  df.at[idx,'status'] = "Failed"
                  post_teams_table(df, msg=f"{app} - Instance not online")
                  send_dynatrace_event(app, "SSM instance not online", success=False)
                  continue

              # Stage 3: App Restart
              ssm_run(iid, "docker stop $(docker ps -q)")
              ssm_run(iid, "docker start $(docker ps -a -q)")
              df.at[idx,'app_restart'] = "Completed"
              post_teams_table(df, msg=f"{app} - App restarted")

              # Stage 4: Health Check / Status
              time.sleep(8)
              status = http_status_via_ssm(iid, url)
              if status != 200:
                  # Retry once
                  ssm_run(iid, "docker restart $(docker ps -a -q)")
                  time.sleep(8)
                  status = http_status_via_ssm(iid, url)
                  if status != 200:
                      df.at[idx,'status'] = "Failed"
                      post_teams_table(df, msg=f"{app} - Health check failed after retry")
                      send_dynatrace_event(app, "Health check failed after retry", success=False)
                  else:
                      df.at[idx,'status'] = "Success after Retry"
                      post_teams_table(df, msg=f"{app} - App healthy after retry")
                      send_dynatrace_event(app, "Patching successful after retry")
              else:
                  df.at[idx,'status'] = "Success"
                  post_teams_table(df, msg=f"{app} - Patching done â€” App healthy")
                  send_dynatrace_event(app, "Patching successful")

          # Stage 5: Final Coordination Table
          post_teams_table(df, msg="Final Patching Coordination")
          df.to_csv(CSV_PATH,index=False)
          PY
