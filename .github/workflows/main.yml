name: Patching Control + Teams + Auto-Restart

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"  # check every 5 mins for reminders & patching

jobs:
  patching-check:
    runs-on: ubuntu-latest

    env:
      CSV_PATH: schedule.csv
      TARGET_ENV: Production
      TZ: Asia/Kolkata
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install pandas requests pytz tabulate

      - name: Patching + Reminders + Approval + Health Check
        run: |
          python <<'PY'
          import pandas as pd, os, time, requests, subprocess, re
          from datetime import datetime, timedelta
          import pytz
          from tabulate import tabulate

          CSV_PATH = os.getenv("CSV_PATH", "schedule.csv")
          TARGET_ENV = os.getenv("TARGET_ENV", "Production")
          TZ = pytz.timezone(os.getenv("TZ", "Asia/Kolkata"))
          TEAMS_URL = os.getenv("TEAMS_WEBHOOK_URL")

          COLS = {
              "app":"app_name",
              "env":"environment",
              "start":"start_date",
              "stop":"stop_date",
              "url":"health_url",
              "cmd":"command",
              "iid":"instanceid",
              "owner":"owner",
              "approval":"approval_status"
          }

          def normalize(df):
              df.columns = [re.sub(r"[^\w]+","_",c.strip().lower()) for c in df.columns]
              for k,v in COLS.items():
                  if v not in df.columns:
                      df[v] = "-"
              return df

          def make_table(df):
              return tabulate(df[list(COLS.values())], headers="keys", tablefmt="github")

          def post_teams(title, message, table=None, approve_url=None, color="0076D7"):
              if not TEAMS_URL: return
              sections=[{"activityTitle":title,"text":message}]
              if table: sections.append({"text":table})
              if approve_url:
                  sections.append({"potentialAction":[{"@type":"OpenUri","name":"Approve","targets":[{"os":"default","uri":approve_url}]}]})
              payload={"@type":"MessageCard","@context":"http://schema.org/extensions","themeColor":color,"summary":title,"sections":sections}
              try: requests.post(TEAMS_URL,json=payload,timeout=10)
              except Exception as e: print(f"[teams] send failed: {e}")

          def save_df(df): df.to_csv(CSV_PATH,index=False)

          def parse_dt(s):
              for fmt in ("%d-%m-%Y %H:%M:%S","%d-%m-%Y %H:%M","%Y-%m-%d %H:%M:%S","%Y-%m-%d %H:%M"):
                  try: return TZ.localize(datetime.strptime(s, fmt))
                  except: pass
              raise ValueError(f"Bad date '{s}'")

          def health_check(url):
              try: return requests.get(url, timeout=5).status_code==200
              except: return False

          df = normalize(pd.read_csv(CSV_PATH))
          now = datetime.now(TZ)

          for idx,row in df.iterrows():
              app = row[COLS["app"]]
              env = row[COLS["env"]]
              start = parse_dt(row[COLS["start"]])
              stop = parse_dt(row[COLS["stop"]])
              url = row[COLS["url"]]
              cmd = row[COLS["cmd"]]
              owner = row[COLS["owner"]]
              approval = row[COLS["approval"]].lower()

              if env != TARGET_ENV: continue

              table = make_table(df)

              # 1-week reminder
              if start - timedelta(days=7) <= now < start - timedelta(days=6, hours=23, minutes=55):
                  post_teams("⏰ Reminder: Patching in 1 week",
                             f"Patching for **{app}**. Owner: {owner}", table)
                  continue

              # 5-min reminder
              if start - timedelta(minutes=5) <= now < start - timedelta(minutes=4, seconds=55):
                  post_teams("⏰ Reminder: Patching starts in 5 minutes",
                             f"Patching for **{app}**. Owner: {owner}", table)
                  continue

              # Approval request if not yet approved
              if approval != "approved" and now < start:
                  approve_link = f"https://your-server.com/approve?app={app}&idx={idx}"
                  post_teams(f"📝 Approval required: {app}", f"Owner: {owner}, please approve patching.", table, approve_link)
                  # wait up to 30 mins
                  for _ in range(60):
                      df = normalize(pd.read_csv(CSV_PATH))
                      approval = df.at[idx,COLS["approval"]].lower()
                      if approval=="approved": break
                      time.sleep(30)
                  else:
                      post_teams(f"⚠ Skipped: {app}", f"No approval received.", table)
                      continue

              # Start patching
              if approval=="approved" and start <= now <= stop:
                  post_teams(f"🛑 Patching started: {app}", f"Patching app {app} owned by {owner}", table)
                  time.sleep(2)
                  post_teams(f"✅ Patching done: {app}", f"{app} patching finished. Performing health check.", table)

                  # Health check
                  healthy = health_check(url)
                  if healthy:
                      post_teams(f"💚 Health check passed: {app}", f"{app} is healthy", table)
                  else:
                      post_teams(f"❌ Health check failed: {app}", f"{app} is unhealthy. Restarting...", table, color="FF0000")
                      if cmd and cmd!="-":
                          try:
                              subprocess.run(cmd, shell=True, check=True)
                              post_teams(f"🔄 App restarted: {app}", f"Restart command executed. Re-checking health.", table)
                              time.sleep(5)
                              if health_check(url):
                                  post_teams(f"💚 Health restored: {app}", f"{app} is now healthy.", table)
                              else:
                                  post_teams(f"⚠ Still unhealthy: {app}", f"{app} failed to recover automatically.", table, color="FF0000")
                          except Exception as e:
                              post_teams(f"⚠ Restart failed: {app}", f"Error: {e}", table, color="FF0000")

              # Outside patching window: normal health check
              if now < start or now > stop:
                  healthy = health_check(url)
                  if healthy:
                      post_teams(f"💡 Health check: {app}", f"{app} is healthy", table)
                  else:
                      post_teams(f"⚠ Health check failed outside window: {app}", f"{app} unhealthy.", table, color="FF0000")

